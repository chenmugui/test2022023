{"name": "test01[case7]", "status": "failed", "statusDetails": {"message": "AssertionError: 错误！响应 code：200 预期 code：201", "trace": "self = <api_cematpshop_excel.scripts.test01.Test01 object at 0x0000026584E5CE80>\ncase = {'expect': {'data': [{'nikename': '风清扬', 'openid': 'UEHUXUXU78272SDSassDD', 'userbalance': 5678.9, 'userid': 17890, .....ttpstatus': 201}, 'headers': {'token': '23657DGYUSGD126731638712GE18271H'}, 'method': 'get', 'param_type': 'data', ...}\n\n    @allure.story(\"订单创建成功\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    # @allure.step(\"测试成功步骤\")\n    @pytest.mark.parametrize(\"case\", tool.read_json())\n    def test01(self, case):\n        log.info(\"正在执行调用执行数据：{}\".format(case))\n        # with allure.step(\"1登录--2获取商品信息--3获取个人信息--4添加购物车--5订单创建\"):\n        try:\n            # 调用 执行接口方法\n            r = Api(case).run_method()\n            print(\"响应数据为：\", r.text)\n            print(\"响应状态码：\", r.status_code)\n            # 断言\n>           common_assert(r, case)\n\nE:\\unittest_cm03\\api_cematpshop_excel\\scripts\\test01.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\ncase = {'expect': {'data': [{'nikename': '风清扬', 'openid': 'UEHUXUXU78272SDSassDD', 'userbalance': 5678.9, 'userid': 17890, .....ttpstatus': 201}, 'headers': {'token': '23657DGYUSGD126731638712GE18271H'}, 'method': 'get', 'param_type': 'data', ...}\n\n    def common_assert(response, case):\n        log.info(\"正在调用断言公共方法\")\n        # 获取响应数据\n        result = response.json()\n        # 获取预期数据\n        expect = case.get(\"expect\")\n        # # 断言 响应状态吗\n        # assert response.status_code == expect.get(\"code\"), \"错误！响应 code：{} 预期code：{}\".format(response.status_code,\n        #                                                                                     expect.get(\"code\"))\n        # # 断言 success\n        # assert result.get(\"success\") == expect.get(\"result\").get(\"success\"), \"错误！响应 success：{} 预期 success：{}\".format(\n        #     result.get(\"success\"), expect.get(\"result\").get(\"success\"))\n        # 断言 httpstatus\n        assert result.get(\"httpstatus\") == expect.get(\"httpstatus\"), \"错误！响应 code：{} 预期 code：{}\".format(result.get(\"httpstatus\"),\n>                                                                                                        expect.get(\"httpstatus\"))\nE       AssertionError: 错误！响应 code：200 预期 code：201\n\ntools\\common_assert.py:20: AssertionError"}, "description": "登录--获取商品信息--获取个人信息--添加购物车--订单创建", "attachments": [{"name": "log", "source": "5cfb4068-d281-4430-a567-22fc1c4c26cc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'path': '/api/getuserinfo', 'method': 'get', 'headers': {'token': '23657DGYUSGD126731638712GE18271H'}, 'param_type': 'data', 'params': None, 'expect': {'data': [{'nikename': '风清扬', 'openid': 'UEHUXUXU78272SDSassDD', 'userbalance': 5678.9, 'userid': 17890, 'username': 'admin', 'userpoints': 4321}], 'httpstatus': 201}, 'x_y': [9, 11]}"}], "start": 1626163207288, "stop": 1626163207412, "uuid": "027a233d-d692-4fa2-8aeb-770fb25ce905", "historyId": "3bb51433b61e8387ebb3c1e693dee009", "testCaseId": "47129fbf042da243132f182880a4d379", "fullName": "scripts.test01.Test01#test01", "labels": [{"name": "story", "value": "订单创建成功"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "订单模块"}, {"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test01"}, {"name": "subSuite", "value": "Test01"}, {"name": "host", "value": "JVAH47KLOGVBZ8N"}, {"name": "thread", "value": "32452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test01"}], "links": [{"type": "test_case", "url": "http://www.baidu.com", "name": "testcase_url"}, {"type": "link", "url": "http://www.baidu.com", "name": "link_url"}, {"type": "issue", "url": "http://www.baidu.com", "name": "issue_url"}]}